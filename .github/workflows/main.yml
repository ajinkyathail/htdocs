name: Manual FTP Pull

on:
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  ftp-pull:
    name: Pull from FTP and Commit to GitHub
    runs-on: ubuntu-latest

    steps:
    - name: Checkout main branch
      uses: actions/checkout@v4
      with:
        ref: main  # Ensure we are checking out the main branch

    - name: Verify .git directory
      run: |
        echo "Listing contents of current directory:"
        ls -la
        echo "Checking for .git directory:"
        if [ -d .git ]; then
          echo ".git directory found."
        else
          echo ".git directory not found. Exiting."
          exit 1
        fi

    - name: Install FTP client
      run: sudo apt-get update && sudo apt-get install -y lftp

    - name: List local files with sizes and modified dates
      run: |
        find . -type f -not -path './.git/*' -not -path './.github/*' -not -name 'local_files.txt' -not -name 'remote_files.txt' -exec stat --format='%Y %s %n' {} \; | sort > local_files.txt
        echo "Local files list:"
        cat local_files.txt

    - name: List and sync remote files
      env:
        FTP_HOST: ${{ secrets.FTP_HOST }}
        FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
        FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
      run: |
        lftp -c "
          set ftp:ssl-force true;
          set ftp:ssl-protect-data true;
          set ssl:verify-certificate no;
          open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST;
          mirror --verbose --exclude .git/ --exclude .github/ --exclude local_files.txt --exclude remote_files.txt /htdocs/ ./
        "
        find . -type f -not -path './.git/*' -not -path './.github/*' -not -name 'local_files.txt' -not -name 'remote_files.txt' -exec stat --format='%Y %s %n' {} \; | sort > remote_files.txt
        echo "Remote files list:"
        cat remote_files.txt

    - name: Compare and Sync Files
      run: |
        echo "Comparing local and remote files"

        # Collect paths of files to keep
        grep -v 'local_files.txt' remote_files.txt | awk '{print $3}' | sed 's/^\.\///' | sort > files_to_keep.txt

        # Remove files that are not in FTP
        while read -r local_mod_time local_size local_path; do
          if [[ "$local_path" != .git/* && "$local_path" != ./.github/* && "$local_path" != ./local_files.txt && "$local_path" != ./remote_files.txt ]]; then
            # Remove leading './' for comparison
            clean_path=$(echo "$local_path" | sed 's/^\.\///')
            if ! grep -q "$clean_path" files_to_keep.txt; then
              echo "Removing local file not present on remote: $local_path"
              rm -f "$local_path" || true
              git rm "$local_path" || true
            fi
          fi
        done < local_files.txt

    - name: Configure Git
      run: |
        if [ -d .git ]; then
          echo "Configuring Git."
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Action"
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/ajinkyathail/htdocs.git
        else
          echo ".git directory not found. Exiting."
          exit 1
        fi

    - name: Check for changes
      run: |
        if [[ -n $(git status --porcelain) ]]; then
          echo "Changes detected. Preparing to push."
        else
          echo "No changes detected. Exiting."
          exit 0
        fi

    - name: Commit and Push changes
      run: |
        git add -A
        if [[ -n $(git status --porcelain) ]]; then
          git commit -m "Sync root with FTP server"
          git push origin main
        else
          echo "No changes to commit."
        fi

    - name: Cleanup
      run: |
        # Remove special files after committing
        rm -f local_files.txt remote_files.txt files_to_keep.txt
