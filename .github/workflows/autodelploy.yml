name: FTP Deployment

on:
  push:
    branches:
      - main  # Trigger deployment when pushing to the main branch

jobs:
  ftp-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 2  # Fetch the last two commits to allow diff comparison

    - name: Install FTP deployment tool if not already installed
      run: |
        if ! command -v lftp &> /dev/null; then
          echo "lftp not found, installing..."
          sudo apt-get update
          sudo apt-get install -y lftp
        else
          echo "lftp is already installed"
        fi

    - name: Prepare directories for FTP operations
      run: |
        # Create directories for temporary files
        mkdir -p ftp_operations/remote_files
        mkdir -p ftp_operations/local_files

    - name: List files in the Git repository
      run: |
        # List files in the Git repository with modification times and sizes
        find . -type f -exec stat --format='%Y %s %n' {} \; | sort > ftp_operations/local_files.txt

    - name: Download remote file list
      env:
        FTP_HOST: ${{ secrets.FTP_HOST }}
        FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
        FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
      run: |
        lftp -c "
          set ssl:verify-certificate no;
          set ftp:ssl-protect-data true;
          set ftp:ssl-force true;
          open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST;
          mirror --verbose --only-newer --exclude-glob .git/ --no-perms www/sigtax.com/ ftp_operations/remote_files/
        "

    - name: List files in the remote directory
      run: |
        # List files in the FTP directory with modification times and sizes
        find ftp_operations/remote_files/ -type f -exec stat --format='%Y %s %n' {} \; | sort > ftp_operations/remote_files_list.txt

    - name: Compare and Sync Files
      run: |
        # Compare files and sync
        while IFS= read -r remote_mod_time remote_size remote_path; do
          local_path="${remote_path#ftp_operations/remote_files/}"
          if [ -f "$local_path" ]; then
            local_mod_time=$(stat --format='%Y' "$local_path")
            local_size=$(stat --format='%s' "$local_path")
            if [ "$remote_mod_time" -gt "$local_mod_time" ] || [ "$remote_size" -ne "$local_size" ]; then
              echo "Updating modified file: $local_path"
              cp "$remote_path" "$local_path"
            fi
          else
            echo "Adding new file: $local_path"
            mkdir -p "$(dirname "$local_path")"
            cp "$remote_path" "$local_path"
          fi
        done < ftp_operations/remote_files_list.txt

        # Remove files that are no longer present in the Git repository
        while IFS= read -r local_mod_time local_size local_path; do
          if [ ! -f "$local_path" ]; then
            echo "Removing local file not present on remote: $local_path"
            rm -f "$local_path"
          fi
        done < ftp_operations/local_files.txt

    - name: Upload changes to FTP server
      env:
        FTP_HOST: ${{ secrets.FTP_HOST }}
        FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
        FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
      run: |
        lftp -c "
          set ssl:verify-certificate no;
          set ftp:ssl-protect-data true;
          set ftp:ssl-force true;
          open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST;
          mirror --reverse --only-newer --verbose --exclude-glob .git/ --no-perms ftp_operations/ www/sigtax.com/
        "

    - name: Cleanup
      run: |
        # Clean up temporary files and directories
        rm -rf ftp_operations
