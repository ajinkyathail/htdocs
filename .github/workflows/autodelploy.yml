- name: Compare and Sync Files
run: |
  echo "Comparing and syncing files..."

  # Compare remote files and sync
  while IFS= read -r remote_mod_time remote_size remote_path; do
    # Ensure remote_path is not empty
    if [ -z "$remote_path" ]; then
      echo "Skipping empty remote path."
      continue
    fi

    # Adjust remote_path to match local_path
    local_path="${remote_path#ftp_operations/remote_files/}"

    # Ensure local_path is not empty
    if [ -z "$local_path" ]; then
      echo "Skipping empty local path."
      continue
    fi

    # Check if the local file exists
    if [ -f "$local_path" ]; then
      local_mod_time=$(stat --format='%Y' "$local_path")
      local_size=$(stat --format='%s' "$local_path")
      # Check if the file needs updating
      if [ "$remote_mod_time" -gt "$local_mod_time" ] || [ "$remote_size" -ne "$local_size" ]; then
        echo "Updating modified file: $local_path"
        cp "$remote_path" "$local_path"
      fi
    else
      # Add new file
      echo "Adding new file: $local_path"
      mkdir -p "$(dirname "$local_path")"
      cp "$remote_path" "$local_path"
    fi
  done < ftp_operations/remote_files_list.txt

  # Remove files that are no longer present in the Git repository
  while IFS= read -r local_mod_time local_size local_path; do
    # Ensure local_path is not empty
    if [ -z "$local_path" ]; then
      echo "Skipping empty local path."
      continue
    fi

    # Check if the file no longer exists in the local repository
    if [ ! -f "$local_path" ]; then
      echo "Removing local file not present on remote: $local_path"
      rm -f "$local_path"
    fi
  done < ftp_operations/local_files.txt